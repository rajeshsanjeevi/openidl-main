{
  "extractionPatternID":"Pattern_01",
  "extractionPatternName":"Insurance Claim Demo Version",
  "description":"Sample description",
  "viewDefinition":{
    "map":"function() {\\n var carrierId = this.documentId.split(\\\"-\\\")[0]; \\n //Variable Setting for Group Fields \\n var stateCode = (this.agrmnt.strctrlCmpnnt.plc.ggrphcArea.enmTyp = 'State Code') ? this.agrmnt.strctrlCmpnnt.plc.ggrphcArea.extrnlRfrnc : ''; \\n var lineofInsurance = this.agrmnt.prdctGrp.extrnlRfrnc; \\n var annualStatementLineofBusiness = ''; \\n //var annualStatementLineofBusiness = -- bug fixed ? add loop through agrmnt.othrRgstrtn[0] and conditional check for enumtype = 'Annual Statement Line of Business' \\n var policyForm = (this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.enmTyp = 'Policy Form') ? this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.extrnlRfrnc : ''   \\n var numberOfEmployees = this.agrmnt.othrCtgry.mxmmSz; \\n var premiumTransactionCodeAgreement = (this.agrmnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.fnnclTrnsctn.enmTyp = 'Premium Statistical Transaction Code') ? this.agrmnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.fnnclTrnsctn.extrnlRfrnc : '' ; \\n var premiumTransactionCodeCoverage = (this.agrmnt.strctrlCmpnnt.cvrgCmpnnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.fnnclTrnsctn.enmTyp = 'Premium Statistical Transaction Code') ? this.agrmnt.strctrlCmpnnt.cvrgCmpnnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.fnnclTrnsctn.extrnlRfrnc : ''; \\n var premiumTransactionCode = ''; \\n if (premiumTransactionCodeAgreement != '') { \\n premiumTransactionCode = premiumTransactionCodeAgreement; \\n } \\n else if (premiumTransactionCodeCoverage != '') { \\n premiumTransactionCode = premiumTransactionCodeCoverage; \\n } \\n var lossTransactionCode = (this.clm.clmFldr[0].elmntryClm[0].prtclrMnyPrvsn[0].mnyPrvsnCshFlw[0].mnyPrvsnPrt[0].fnnclTrnsctn.enmTyp = 'Loss Statistical Transaction Code') ? this.clm.clmFldr[0].elmntryClm[0].prtclrMnyPrvsn[0].mnyPrvsnCshFlw[0].mnyPrvsnPrt[0].fnnclTrnsctn.extrnlRfrnc : '';  \\n var transactionCode=''; \\n var causeOfLoss = (this.clm.clmFldr[0].elmntryClm[0].evnt[0].csoflss[0].enmTyp = 'Cause of Loss' ) ? this.clm.clmFldr[0].elmntryClm[0].evnt[0].csoflss[0].extrnlRfrnc : ''; \\n var claimStatus = this.clm.clmFldr[0].stts; \\n var premiumAccountingDate = this.agrmnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.accntSttmnt.prdStrtDt; \\n var lossAccountingDate = this.clm.clmFldr[0].elmntryClm[0].prtclrMnyPrvsn[0].mnyPrvsnCshFlw[0].mnyPrvsnPrt[0].accntSttmnt.prdStrtDt; \\n var accountingDate = ''; \\n var lossAccidentDate = this.clm.clmFldr[0].evnt[0].strtDt; \\n var businessInteruptionFlag = (this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.plcyCvrgs[0].enmTyp = 'Business Interruption Flag') ? this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.plcyCvrgs[0].cvrgFlg : '' \\n var physicalDamageRequirement = (this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.enmTyp = 'Physical Damage Requirement') ? this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.extrnlRfrnc : '' \\n var viralExclusion = (this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.plcyCvrgs[0].enmTyp = 'Viral Exclusion') ? this.agrmnt.stndrdTxtSpcfctn.cmpstTxtBlck.plcyCvrgs[0].cvrgFlg : '' \\n var sicCode = (this.agrmnt.bsnssActvty.enmTyp = 'SIC Code') ? this.agrmnt.bsnssActvty.indstryCd : '' \\n var sicCodeName = (this.agrmnt.bsnssActvty.enmTyp = 'SIC Code') ? this.agrmnt.bsnssActvty.nm : '' \\n var claimNumber = (this.clm.clmFldr[0].enmTyp = 'Claim Number') ? this.clm.clmFldr[0].nm : ''; \\n var policyNumber = '' ; \\n //this.agrmnt.indvdlAgrmnt.nm ; //option to temporary use individual location as location for Commerical Aggreement not available in data model \\n var writtenPremiumAmount = (this.agrmnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.enmTyp = 'Written Premium Amount') ? parseFloat(this.agrmnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.amnt) : '' \\n var purePremiumAmount = (this.agrmnt.strctrlCmpnnt.cvrgCmpnnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.enmTyp = 'Pure Premium Amount') ? parseFloat(this.agrmnt.strctrlCmpnnt.cvrgCmpnnt.prtclrMnyPrvsn.mnyPrvsnCshFlw.mnyPrvsnPrt.amnt) : ''; \\n var claimCount = parseInt(this.clm.clmFldr[0].elmntryClm[0].prtclrMnyPrvsn[0].mnyPrvsnCshFlw[0].mnyPrvsnPrt[0].clmsCnt); \\n var lossAmount = parseFloat(this.clm.clmFldr[0].elmntryClm[0].prtclrMnyPrvsn[0].mnyPrvsnCshFlw[0].mnyPrvsnPrt[0].amnt); \\n if(premiumTransactionCode != '' ) { \\n accountingDate = premiumAccountingDate; \\n transactionCode = premiumTransactionCode; \\n } else if(lossTransactionCode != '' ) { \\n accountingDate = lossAccountingDate; \\n transactionCode = lossTransactionCode; \\n } \\n //Conditional Variables \\n var lineofInsuranceFilter = ['31','47','49'];// BP : 49, CP : 47, IM:31 \\n var annualStatementLineofBusinessFilter = ['010','21','51']; \\n var lossAccountingStartDate = new Date('01/01/2010'); // 2010 to be changed to 2020 \\n var lossAccountingEndDate = ''; \\n var premiumAccountingStartDate = new Date('01/01/2010'); //2010 to be changed to 2020 \\n var premiumAccountingEndDate = new Date('12/31/2019'); \\n var lossAccidentDateStartDate = new Date('01/01/2020'); \\n var lossAccidentDateEndDate = ''; \\n var transactionCodeFilter = [\\\"1\\\",\\\"2\\\",\\\"3\\\",\\\"9\\\"]; //Transaction code in (1|2|3|9)  \\n //Apply conditions \\n var premiumAccountingDateParts = premiumAccountingDate.split(\\\"/\\\");  \\n var premiumAccountingDateModified = new Date(premiumAccountingDateParts[1],premiumAccountingDateParts[0],'01'); \\n var lossAccountingDateParts = lossAccountingDate.split(\\\"/\\\"); \\n var lossAccountingDateModified = new Date(lossAccountingDateParts[1],lossAccountingDateParts[0],'01'); \\n var lossAccidentDateParts = lossAccidentDate.split(\\\"/\\\"); \\n var lossAccidentDateModified = new Date(lossAccidentDate[1],lossAccidentDate[0],'01'); \\n var currentDate = new Date(); \\n if (lineofInsuranceFilter.includes(lineofInsurance) \\u0026\\u0026 (transactionCodeFilter.includes(transactionCode)) \\n \\u0026\\u0026 ((premiumAccountingDateModified \\u003e= premiumAccountingStartDate \\u0026\\u0026 premiumAccountingDateModified \\u003c= premiumAccountingEndDate) \\n || (lossAccountingDateModified \\u003e= lossAccountingStartDate \\u0026\\u0026 lossAccountingDateModified \\u003c= currentDate)) \\n //\\u0026\\u0026 (lossAccidentDateModified \\u003e= lossAccidentDateStartDate \\u0026\\u0026 lossAccidentDateModified \\u003c= currentDate) \\n //\\u0026\\u0026 (annualStatementLineofBusinessFilter.includes(annualStatementLineofBusiness)) \\n //\\u0026\\u0026 •  Cause of loss in (‘All other physical damage’)  \\n ) {\\n var mapvalue = { \\n \\\"carrierId\\\": carrierId, \\n \\\"stateCode\\\": stateCode, \\n \\\"lineofInsurance\\\": lineofInsurance, \\n \\\"annualStatementLineofBusiness\\\": annualStatementLineofBusiness, \\n \\\"policyForm\\\": policyForm, \\n \\\"numberOfEmployees\\\": numberOfEmployees, \\n \\\"transactionCode\\\": transactionCode, \\n \\\"causeOfLoss\\\": causeOfLoss, \\n \\\"claimStatus\\\": claimStatus, \\n \\\"accountingDate\\\": accountingDate, \\n \\\"lossAccidentDate\\\": lossAccidentDate, \\n \\\"businessInteruptionFlag\\\": businessInteruptionFlag, \\n \\\"physicalDamageRequirement\\\": physicalDamageRequirement, \\n \\\"viralExclusion\\\": viralExclusion, \\n \\\"sicCode\\\": sicCode, \\n \\\"policyNumber\\\": policyNumber, \\n \\\"claimNumber\\\": claimNumber, \\n \\\"uniquePolicyNumber\\\": 0, \\n \\\"writtenPremiumAmount\\\": writtenPremiumAmount, \\n \\\"lossAmount\\\": lossAmount, \\n \\\"uniqueClaimNumber\\\": 0 \\n }; \\n //Key, Value setting Result Calculation and setting \\n var newKey = [carrierId,stateCode,lineofInsurance,annualStatementLineofBusiness,policyForm,numberOfEmployees,transactionCode,causeOfLoss,claimStatus,accountingDate,lossAccidentDate,businessInteruptionFlag,physicalDamageRequirement,viralExclusion,sicCode];\\n var result = { \\n \\\"key\\\": newKey, \\n \\\"value\\\": mapvalue \\n } \\n emit({\\\"carrierId\\\":carrierId,\\\"stateCode\\\":stateCode,\\\"lineofInsurance\\\":lineofInsurance,\\\"annualStatementLineofBusiness\\\":annualStatementLineofBusiness,\\\"policyForm\\\":policyForm,\\\"numberOfEmployees\\\":numberOfEmployees,\\\"transactionCode\\\":transactionCode,\\\"causeOfLoss\\\":causeOfLoss,\\\"claimStatus\\\":claimStatus,\\\"accountingDate\\\":accountingDate,\\\"lossAccidentDate\\\":lossAccidentDate,\\\"businessInteruptionFlag\\\":businessInteruptionFlag,\\\"physicalDamageRequirement\\\":physicalDamageRequirement,\\\"viralExclusion\\\":viralExclusion,\\\"sicCode\\\":sicCode}, result); \\n } \\n }\\n",
    "reduce":"function(key,value) {\\n var lossAmountSum = 0.0;\\n var writtenPremiumAmountSum = 0.0;\\n var claimCountSum = 0.0;\\n var policyCountSum = 0.0;\\n var result = {};\\n var distinctPolicyNumber = {};\\n var distinctClaimNumber = {};\\n //value.map(e =\\u003e { distinctPolicyNumber[e.value.policyNumber] = (distinctPolicyNumber[e.value.policyNumber] || 0) + 1 }) \\n value.forEach(function(element) {\\n //if (element.value.policyNumber != '') {policyCountSum = policyCountSum +1;} \\n if ((distinctPolicyNumber[element.value.policyNumber] === undefined || distinctPolicyNumber[element.value.policyNumber] === 0) \\n \\u0026\\u0026 element.value.policyNumber != '') {\\n distinctPolicyNumber[element.value.policyNumber] = 1;\\n } else if (element.value.policyNumber != ''){ \\n distinctPolicyNumber[element.value.policyNumber] = distinctPolicyNumber[element.value.policyNumber] + 1;\\n }\\n if ((distinctClaimNumber[element.value.claimNumber] === undefined || distinctClaimNumber[element.value.claimNumber] === 0) \\n \\u0026\\u0026 element.value.claimNumber != '') { \\n distinctClaimNumber[element.value.claimNumber] = 1;\\n } else if (element.value.claimNumber != '') {\\n distinctClaimNumber[element.value.claimNumber] = distinctClaimNumber[element.value.claimNumber] + 1;\\n }\\n lossAmountSum = lossAmountSum + element.value.lossAmount;\\n writtenPremiumAmountSum = writtenPremiumAmountSum + element.value.writtenPremiumAmount;\\n //claimCountSum = claimCountSum + element.value.claimCount;\\n });\\n //result.policyCount = policyCountSum;\\n result.uniquePolicyNumber = Object.keys(distinctPolicyNumber).length;\\n result.writtenPremiumAmount = writtenPremiumAmountSum;\\n result.lossAmount = lossAmountSum;\\n //result.claimCount = claimCountSum;\\n result.uniqueClaimNumber = Object.keys(distinctClaimNumber).length;\\n return result;\\n }\\n\"},\"dbType\":\"mongo\",\"version\":\"1\",\"isActive\":true,\"effectiveStartTs\":\"2020-01-30T18:30:00Z\",\"effectiveEndTs\":\"2022-01-30T18:30:00Z\",\"updatedTs\":\"2020-07-16T04:06:25.83Z\",\"updatedBy\":\"test@aais.com"},
  "dbType":"mongo",
  "version":"1",
  "isActive":true,
  "effectiveStartTs":"2020-01-30T18:30:00Z",
  "effectiveEndTs":"2022-01-30T18:30:00Z",
  "updatedTs":"2020-07-16T06:13:41.571Z",
  "updatedBy":"aaisstatagent@aais.com"
}